@inject TodoClient Client

@if (todos is null)
{
    if (statusCode is null)
    {
        <em>Loading...</em>
    }
    else if (statusCode == HttpStatusCode.Unauthorized)
    {
        <div>
            <input type="text" name="username" @bind="username" />
        </div>
        <div>
            <input type="password" name="password" @bind="password" />
        </div>
        <input type="button" value="Login" onclick="@(() => Login())" />
    }
    else
    {
        @statusCode
    }
}
else
{
    <input type="button" value="Logout" onclick="@(() => Logout())" />

    <form onsubmit="@(() => AddTodo())">
        <input class="new-todo" placeholder="What needs to be done?" @bind="todoItem" />
    </form>
    <ul class="todo-list">
        @foreach (var todo in todos)
        {
            var id = todo.Id;
            <li class=@(todo.IsComplete ? "completed" : "") @key="id">
                <div class="view">
                    <input class="toggle" type="checkbox" @bind="@todo.IsComplete" />
                    <label>@todo.Title</label>
                    <button class="destroy" onclick="@(() => DeleteTodo(id))"></button>
                </div>
            </li>
        }
    </ul>
}

@code {
    TodoItem[]? todos;
    HttpStatusCode? statusCode;

    string? username;
    string? password;

    string? todoItem;

    async Task AddTodo()
    {
        if (todoItem is { Length: > 0 })
        {
            if (await Client.AddTodoAsync(todoItem))
            {
                todoItem = null;

                await OnInitializedAsync();
            }
        }
    }

    async Task DeleteTodo(int id)
    {
        if (await Client.DeleteTodoAsync(id))
        {
            await OnInitializedAsync();

            StateHasChanged();
        }
    }

    async Task Logout()
    {
        if (await Client.LogoutAsync())
        {
            statusCode = HttpStatusCode.Unauthorized;
            todos = null;
        }
    }

    async Task Login()
    {
        if (await Client.LoginAsync(username, password))
        {
            username = null;
            password = null;

            await OnInitializedAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        (statusCode, todos) = await Client.GetTodosAsync();

        if (statusCode == HttpStatusCode.Forbidden)
        {
            await Logout();
        }
    }
}